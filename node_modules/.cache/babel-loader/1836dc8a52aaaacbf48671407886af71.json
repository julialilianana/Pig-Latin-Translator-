{"ast":null,"code":"var _jsxFileName = \"/Users/learn/Desktop/Challenge-Pig-Latin-React/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // the state object holds information that can be displayed to the user and updated throughout the program\n\n    this.myPigLatinCodeHere = () => {\n      const ay = [\"a\", \"y\"];\n      const way = [\"w\", \"a\", \"y\"]; // the variable 'userInput' will contain the text input from the user\n      // no need to change this variable\n\n      let userInput = this.state.phrase; // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n      // no need to change this variable\n\n      let translatedWordsArray = []; // taking the user input and spliting the text into an array of words\n\n      let splitUserInput = userInput.toLowerCase().split(\" \"); // now that we have an array of words, we can map over the array and access each word\n\n      splitUserInput.map(currentWord => {\n        let vowelArray = [];\n        let newArr = []; // ACTION ITEM: use 'currentWord' as a starting point for your code\n\n        const lettersArray = currentWord.split(\"\"); // const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        // let extractedLettersArray = [];\n        // let anotherArray = [];\n\n        if (lettersArray[0] === \"a\" || lettersArray[0] === \"e\" || lettersArray[0] === \"i\" || lettersArray[0] === \"o\" || lettersArray[0] === \"u\") {\n          vowelArray = lettersArray.concat(way).join(\"\");\n        } else if (lettersArray.indexOf(\"q\") === 0 && lettersArray.indexOf(\"u\") === 1) {\n          lettersArray.push(\"q\");\n          lettersArray.push(\"u\");\n          lettersArray.shift();\n          lettersArray.shift();\n          newArr = lettersArray.concat(ay).join(\"\");\n          console.log(newArr);\n        } else if (lettersArray.indexOf(\"s\") === 0 && lettersArray.indexOf(\"q\") === 1 && lettersArray.indexOf(\"u\") === 2) {\n          lettersArray.push(\"s\");\n          lettersArray.push(\"q\");\n          lettersArray.push(\"u\");\n          lettersArray.shift();\n          lettersArray.shift();\n          lettersArray.shift();\n          newArr = lettersArray.concat(ay).join(\"\");\n        } else if (lettersArray.indexOf(\"y\") === 0) {\n          lettersArray.push(\"y\");\n          lettersArray.shift();\n          newArr = lettersArray.concat(ay).join(\"\");\n        } // console.log(newArr);\n        // console.log(vowelArray);\n        //take string and place into an array where each word is a seperate index\n        // take new array filer the array to take each individual word and output a new arrays for each word seperated by letter\n        //check and see if starts with vowel\n        //keeps word and add \"way\" to the end\n        //create a function that filters through an array, and when a vowel is hit, it takes the consonants before pushes them to the end of the array and adds an \"ay\"\n        //check and see if word contains a \"qu\"\n        // if qu make sure that the u is moved with the q\n        //check to see if starts with y\n        // if starts with y, the y moves, if noy it stays\n        //check to see if starts with constructor\n        // take until the first vowel and add at end with ay\n        //take word and const to new array with other translated words\n        //convert array back to string .\"join\"\n        // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n\n\n        return translatedWordsArray.push(currentWord);\n      }); // joining the array back to a string of translated words\n      // no need to change this variable\n\n      let translatedWords = translatedWordsArray.join(\" \"); // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n      // no need to change this method\n\n      this.setState({\n        phraseTranslated: translatedWords\n      }); // done!\n    };\n\n    this.setUpPreventDefault = e => {\n      // this method prevents react from refreshing the page unnecessarily\n      // no need to modify this method\n      e.preventDefault();\n      this.myPigLatinCodeHere();\n    };\n\n    this.handleChange = e => {\n      // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n      // no need to modify this method\n      this.setState({\n        phrase: e.target.value\n      });\n    };\n\n    this.restartGame = () => {\n      // this method restarts the game by setting the original state\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n      this.setState({\n        phrase: '',\n        phraseTranslated: ''\n      });\n    };\n\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: 'squeal queen yummy apple ',\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    };\n  } // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Pig Latin Translator\"), React.createElement(\"div\", {\n      id: \"pigImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\",\n      alt: \"pig with butcher cut names in pig latin\",\n      id: \"butcherPig\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Enter phrase to be translated:\"), React.createElement(\"div\", {\n      className: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"inputPhrase\",\n      onChange: this.handleChange,\n      value: this.state.phrase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setUpPreventDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"button\", {\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Clear\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.state.phraseTranslated)), React.createElement(\"footer\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Coded by Julia, Meo, and Xena\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learn/Desktop/Challenge-Pig-Latin-React/src/App.js"],"names":["React","App","Component","constructor","props","myPigLatinCodeHere","ay","way","userInput","state","phrase","translatedWordsArray","splitUserInput","toLowerCase","split","map","currentWord","vowelArray","newArr","lettersArray","concat","join","indexOf","push","shift","console","log","translatedWords","setState","phraseTranslated","setUpPreventDefault","e","preventDefault","handleChange","target","value","restartGame","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    // the state object holds information that can be displayed to the user and updated throughout the program\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: 'squeal queen yummy apple ',\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    }\n  }\n\n  // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n  myPigLatinCodeHere = () => {\n    const ay = [\"a\", \"y\"];\n    const way = [\"w\",\"a\", \"y\"];\n    // the variable 'userInput' will contain the text input from the user\n    // no need to change this variable\n    let userInput = this.state.phrase\n\n    // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n    // no need to change this variable\n    let translatedWordsArray = []\n\n    // taking the user input and spliting the text into an array of words\n    let splitUserInput = userInput.toLowerCase().split(\" \")\n\n    // now that we have an array of words, we can map over the array and access each word\n    splitUserInput.map(currentWord => {\n      let vowelArray = [];\n      let newArr = [];\n      // ACTION ITEM: use 'currentWord' as a starting point for your code\n      const lettersArray = currentWord.split(\"\");\n        // const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n      // let extractedLettersArray = [];\n      // let anotherArray = [];\n\n      if (lettersArray[0] === \"a\" || lettersArray[0] === \"e\" || lettersArray[0] === \"i\"|| lettersArray[0] === \"o\"|| lettersArray[0] === \"u\"){\n        vowelArray = lettersArray.concat(way).join(\"\");\n      } else if (lettersArray.indexOf(\"q\") === 0 && lettersArray.indexOf(\"u\") === 1) {\n        lettersArray.push(\"q\");\n        lettersArray.push(\"u\");\n        lettersArray.shift();\n        lettersArray.shift();\n        newArr = lettersArray.concat(ay).join(\"\");\n        console.log(newArr);\n      } else if (lettersArray.indexOf(\"s\") === 0 && lettersArray.indexOf(\"q\") === 1 && lettersArray.indexOf(\"u\") === 2) {\n        lettersArray.push(\"s\");\n        lettersArray.push(\"q\");\n        lettersArray.push(\"u\");\n        lettersArray.shift();\n        lettersArray.shift();\n        lettersArray.shift();\n        newArr = lettersArray.concat(ay).join(\"\");\n    } else if (lettersArray.indexOf(\"y\") === 0) {\n        lettersArray.push(\"y\");\n        lettersArray.shift();\n        newArr = lettersArray.concat(ay).join(\"\");\n      }\n\n      // console.log(newArr);\n      // console.log(vowelArray);\n\n      //take string and place into an array where each word is a seperate index\n      // take new array filer the array to take each individual word and output a new arrays for each word seperated by letter\n\n      //check and see if starts with vowel\n      //keeps word and add \"way\" to the end\n\n      //create a function that filters through an array, and when a vowel is hit, it takes the consonants before pushes them to the end of the array and adds an \"ay\"\n      //check and see if word contains a \"qu\"\n      // if qu make sure that the u is moved with the q\n      //check to see if starts with y\n      // if starts with y, the y moves, if noy it stays\n      //check to see if starts with constructor\n      // take until the first vowel and add at end with ay\n\n\n      //take word and const to new array with other translated words\n      //convert array back to string .\"join\"\n\n      // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n      return translatedWordsArray.push(currentWord)\n    })\n\n\n    // joining the array back to a string of translated words\n    // no need to change this variable\n    let translatedWords = translatedWordsArray.join(\" \")\n\n    // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n    // no need to change this method\n    this.setState({ phraseTranslated: translatedWords })\n    // done!\n  }\n\n  setUpPreventDefault = (e) => {\n    // this method prevents react from refreshing the page unnecessarily\n    // no need to modify this method\n    e.preventDefault()\n    this.myPigLatinCodeHere()\n  }\n\n  handleChange = (e) => {\n    // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n    // no need to modify this method\n    this.setState({ phrase: e.target.value })\n  }\n\n  restartGame = () => {\n    // this method restarts the game by setting the original state\n    // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n    this.setState({\n      phrase: '',\n      phraseTranslated: ''\n    })\n  }\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return (\n      <div>\n        <h1>Pig Latin Translator</h1>\n          <div id=\"pigImage\">\n            <img\n              src=\"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\"\n              alt=\"pig with butcher cut names in pig latin\"\n              id=\"butcherPig\"\n            />\n          </div>\n          <div className=\"box\">\n            <h4>Enter phrase to be translated:</h4>\n            <div className=\"info\">\n            {/* user input field - every DOM event that happens in the input will call the handleChange method and update state */}\n              <input\n                id=\"inputPhrase\"\n                onChange={ this.handleChange }\n                value={ this.state.phrase }\n              />\n              <br />\n              {/* button that called the setUpPreventDefault method */}\n              <button onClick={ this.setUpPreventDefault }>Submit</button>\n              {/* button that resets the game */}\n              <button onClick={ this.restartGame }>Clear</button>\n            </div>\n            {/* where the translated phrase will display */}\n            <p>{ this.state.phraseTranslated }</p>\n          </div>\n        <footer>\n          Coded by Julia, Meo, and Xena\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}