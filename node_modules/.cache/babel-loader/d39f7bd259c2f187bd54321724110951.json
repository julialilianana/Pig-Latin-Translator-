{"ast":null,"code":"var _jsxFileName = \"/Users/learn/Desktop/Challenge-Pig-Latin-React/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // the state object holds information that can be displayed to the user and updated throughout the program\n\n    this.myPigLatinCodeHere = () => {\n      // the variable 'userInput' will contain the text input from the user\n      // no need to change this variable\n      let userInput = this.state.phrase; // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n      // no need to change this variable\n\n      let translatedWordsArray = []; // taking the user input and spliting the text into an array of words\n\n      let splitUserInput = userInput.toLowerCase().split(\" \"); // now that we have an array of words, we can map over the array and access each word\n\n      splitUserInput.map(currentWord => {\n        const ay = [\"a\", \"y\"];\n        const way = [\"w\", \"a\", \"y\"]; // ACTION ITEM: use 'currentWord' as a starting point for your code\n\n        const lettersArray = currentWord.split(\"\"); // const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n        if (lettersArray.indexOf('q') === 0) {\n          lettersArray.push('q');\n        }\n\n        if (lettersArray.indexOf('u') === 1) {\n          lettersArray.push('u');\n        }\n\n        lettersArray.shift();\n        lettersArray.shift();\n        lettersArray.concat(ay);\n        console.log(lettersArray);\n        lettersArray.map(letter => {\n          if (letter.indexOf('q') === 0) {\n            // push 'q' to the end of lettersArray\n            lettersArray.push('q');\n            lettersArray.shift();\n          }\n\n          if (letter.indexOf('u') === 1) {\n            // push 'u' to the end of lettersArray\n            lettersArray.push('u');\n          } // shift letter 'q' out of lettersArray\n          // shift letter 'u' out of lettersArray\n          // concat lettersArray to appropriate array then join\n\n        });\n\n        for (var i = 0; i < lettersArray.length - 1; i++) {\n          if (lettersArray[i] === \"s\" && lettersArray[i + 1] === \"q\") {\n            extractedLettersArray.push(lettersArray[i]);\n            extractedLettersArray.push(lettersArray[i + 1]);\n            extractedLettersArray.push(lettersArray[i + 2]);\n            return extractedLettersArray;\n          } else if (lettersArray[i] === \"q\" && lettersArray[i + 1] === \"u\") {\n            extractedLettersArray.push(lettersArray[i]);\n            extractedLettersArray.push(lettersArray[i + 1]);\n          }\n        } //take string and place into an array where each word is a seperate index\n        // take new array filer the array to take each individual word and output a new arrays for each word seperated by letter\n        //check and see if starts with vowel\n        //keeps word and add \"way\" to the end\n        //create a function that filters through an array, and when a vowel is hit, it takes the consonants before pushes them to the end of the array and adds an \"ay\"\n        //check and see if word contains a \"qu\"\n        // if qu make sure that the u is moved with the q\n        //check to see if starts with y\n        // if starts with y, the y moves, if noy it stays\n        //check to see if starts with constructor\n        // take until the first vowel and add at end with ay\n        //take word and const to new array with other translated words\n        //convert array back to string .\"join\"\n        // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n\n\n        return translatedWordsArray.push(currentWord);\n      }); // joining the array back to a string of translated words\n      // no need to change this variable\n\n      let translatedWords = translatedWordsArray.join(\" \"); // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n      // no need to change this method\n\n      this.setState({\n        phraseTranslated: translatedWords\n      }); // done!\n    };\n\n    this.setUpPreventDefault = e => {\n      // this method prevents react from refreshing the page unnecessarily\n      // no need to modify this method\n      e.preventDefault();\n      this.myPigLatinCodeHere();\n    };\n\n    this.handleChange = e => {\n      // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n      // no need to modify this method\n      this.setState({\n        phrase: e.target.value\n      });\n    };\n\n    this.restartGame = () => {\n      // this method restarts the game by setting the original state\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n      this.setState({\n        phrase: '',\n        phraseTranslated: ''\n      });\n    };\n\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: 'every through yummy squeal queen fry',\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    };\n  } // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Pig Latin Translator\"), React.createElement(\"div\", {\n      id: \"pigImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\",\n      alt: \"pig with butcher cut names in pig latin\",\n      id: \"butcherPig\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Enter phrase to be translated:\"), React.createElement(\"div\", {\n      className: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"inputPhrase\",\n      onChange: this.handleChange,\n      value: this.state.phrase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setUpPreventDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"button\", {\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Clear\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, this.state.phraseTranslated)), React.createElement(\"footer\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Coded by Julia, Meo, and Xena\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learn/Desktop/Challenge-Pig-Latin-React/src/App.js"],"names":["React","App","Component","constructor","props","myPigLatinCodeHere","userInput","state","phrase","translatedWordsArray","splitUserInput","toLowerCase","split","map","currentWord","ay","way","lettersArray","indexOf","push","shift","concat","console","log","letter","i","length","extractedLettersArray","translatedWords","join","setState","phraseTranslated","setUpPreventDefault","e","preventDefault","handleChange","target","value","restartGame","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    // the state object holds information that can be displayed to the user and updated throughout the program\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: 'every through yummy squeal queen fry',\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    }\n  }\n\n  // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n  myPigLatinCodeHere = () => {\n    // the variable 'userInput' will contain the text input from the user\n    // no need to change this variable\n    let userInput = this.state.phrase\n\n    // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n    // no need to change this variable\n    let translatedWordsArray = []\n\n    // taking the user input and spliting the text into an array of words\n    let splitUserInput = userInput.toLowerCase().split(\" \")\n\n    // now that we have an array of words, we can map over the array and access each word\n    splitUserInput.map(currentWord => {\n        const ay = [\"a\", \"y\"]\n        const way = [\"w\",\"a\", \"y\"]\n      // ACTION ITEM: use 'currentWord' as a starting point for your code\n      const lettersArray = currentWord.split(\"\");\n      // const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\n      if (lettersArray.indexOf('q') === 0) {\n          lettersArray.push('q');\n      }\n\n      if (lettersArray.indexOf('u') === 1) {\n          lettersArray.push('u');\n      }\n\n      lettersArray.shift();\n      lettersArray.shift();\n      lettersArray.concat(ay);\n\n      console.log(lettersArray);\n\n      lettersArray.map(letter => {\n          if (letter.indexOf('q') === 0) {\n              // push 'q' to the end of lettersArray\n              lettersArray.push('q');\n              lettersArray.shift();\n          }\n\n          if (letter.indexOf('u') === 1) {\n              // push 'u' to the end of lettersArray\n              lettersArray.push('u');\n          }\n          // shift letter 'q' out of lettersArray\n          // shift letter 'u' out of lettersArray\n          // concat lettersArray to appropriate array then join\n      })\n\n      for (var i = 0; i < lettersArray.length - 1; i++) {\n          if (lettersArray[i] === \"s\" && lettersArray[i + 1] === \"q\") {\n              extractedLettersArray.push(lettersArray[i]);\n              extractedLettersArray.push(lettersArray[i + 1]);\n              extractedLettersArray.push(lettersArray[i + 2]);\n              return extractedLettersArray;\n          } else if (lettersArray[i] === \"q\" && lettersArray[i + 1] === \"u\") {\n              extractedLettersArray.push(lettersArray[i]);\n              extractedLettersArray.push(lettersArray[i + 1]);\n          }\n      }\n\n\n\n      //take string and place into an array where each word is a seperate index\n      // take new array filer the array to take each individual word and output a new arrays for each word seperated by letter\n\n      //check and see if starts with vowel\n      //keeps word and add \"way\" to the end\n\n      //create a function that filters through an array, and when a vowel is hit, it takes the consonants before pushes them to the end of the array and adds an \"ay\"\n      //check and see if word contains a \"qu\"\n      // if qu make sure that the u is moved with the q\n      //check to see if starts with y\n      // if starts with y, the y moves, if noy it stays\n      //check to see if starts with constructor\n      // take until the first vowel and add at end with ay\n\n\n      //take word and const to new array with other translated words\n      //convert array back to string .\"join\"\n\n      // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n      return translatedWordsArray.push(currentWord)\n    })\n\n\n    // joining the array back to a string of translated words\n    // no need to change this variable\n    let translatedWords = translatedWordsArray.join(\" \")\n\n    // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n    // no need to change this method\n    this.setState({ phraseTranslated: translatedWords })\n    // done!\n  }\n\n  setUpPreventDefault = (e) => {\n    // this method prevents react from refreshing the page unnecessarily\n    // no need to modify this method\n    e.preventDefault()\n    this.myPigLatinCodeHere()\n  }\n\n  handleChange = (e) => {\n    // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n    // no need to modify this method\n    this.setState({ phrase: e.target.value })\n  }\n\n  restartGame = () => {\n    // this method restarts the game by setting the original state\n    // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n    this.setState({\n      phrase: '',\n      phraseTranslated: ''\n    })\n  }\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return (\n      <div>\n        <h1>Pig Latin Translator</h1>\n          <div id=\"pigImage\">\n            <img\n              src=\"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\"\n              alt=\"pig with butcher cut names in pig latin\"\n              id=\"butcherPig\"\n            />\n          </div>\n          <div className=\"box\">\n            <h4>Enter phrase to be translated:</h4>\n            <div className=\"info\">\n            {/* user input field - every DOM event that happens in the input will call the handleChange method and update state */}\n              <input\n                id=\"inputPhrase\"\n                onChange={ this.handleChange }\n                value={ this.state.phrase }\n              />\n              <br />\n              {/* button that called the setUpPreventDefault method */}\n              <button onClick={ this.setUpPreventDefault }>Submit</button>\n              {/* button that resets the game */}\n              <button onClick={ this.restartGame }>Clear</button>\n            </div>\n            {/* where the translated phrase will display */}\n            <p>{ this.state.phraseTranslated }</p>\n          </div>\n        <footer>\n          Coded by Julia, Meo, and Xena\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}